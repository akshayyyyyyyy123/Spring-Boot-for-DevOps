WAR file (Web Application ARchive):
	- WAR files are specifically designed for packaging entire web applications in Java. They include not only Java classes and resources but also web-specific components such as HTML pages, JSP files, servlets, configuration files, and other web-related artifacts.

	- Contains compiled Java classes, web pages (HTML, JSP), web-specific resources (CSS, JavaScript, images), servlets, configuration files (web.xml), and other web-related artifacts.

	- Example: A WAR file for an e-commerce website containing all the necessary code and resources to run the application.

	- By packaging the entire web application into a single file, WAR files simplify the deployment process. The WAR file can be deployed to any compatible web server or application server.

	- Example: Deploying a WAR file to an Apache Tomcat server involves copying the WAR file to the server's webapps directory.

-> PURPOSE
	- To package web applications that can be deployed on a web server.
	- Facilitates the distribution of web components and resources needed for running web applications.

-> STRUCTURE
	- WEB-INF Directory: Contains all the server-side resources:
		* web.xml: Deployment descriptor file which configures servlets, filters, listeners, and other web components.
		* lib: Contains JAR files used by the web application.
		* classes: Contains compiled classes and resource files needed by the application.
	- Static Resources such as HTML, CSS, JavaScript, images, and other resources accessible to the web client.	

-> USAGE
	- They are deployed on a web server like Apache Tomcat, Jetty, etc. 

-> Structure of WAR file
		my-webapp.war                       								(war file)
			|-- index.html													(root directory)
			|-- styles.css                     								(root directory)
			|-- scripts.js      											(root directory)
			|-- login.jsp                      								(root directory)
			|-- images/ 													(root directory subdirectory)
			|     |-- logo.png       										(root directory subdirectory content)
			|-- WEB-INF/													(special directory within the root directory)
    				|-- web.xml
    				|-- classes/
    				|      |-- com/example/MyServlet.class
    				|      |-- config.properties
    				|-- lib/
        				  |-- my-library.jar
        				  |-- another-library.jar

-> Root Directory
		- contains static resources accessible to the client
		- static resources include html files, css files, javascript files, images and media, etc.

-> WEB-INF Directory
		- Contains server-side resources and configuration files, not directly accessible by the client.
		- this directory is protected and not accessible directly by clients for security reasons.	
		- web.xml : 
			* The web.xml file is a configuration file for a Java web application. It is located in the WEB-INF directory of a WAR file and defines various settings and components of the web application. It holds:	
					* Servlet definitions: define servlets and map them to specific URLs
					* Filter defn: define filters that can process requests and responses.
					* Listener Definitions: define event listeners for lifecycle events (like application startup and shutdown).
					* Context Parameters: define global parameters accessible to the entire web application.
					* Welcome Files: define default files that should be served when a directory is requested.
					* Error Pages: define custom error pages for specific error codes or exceptions.

-> The web.xml file holds configuration information for the web application, defining how servlets, filters, listeners, context parameters, welcome files, and error pages should be handled. This helps in managing the behavior and settings of the web application centrally.					